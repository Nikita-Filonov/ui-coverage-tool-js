{"version":3,"sources":["../src/tools/actions.ts","../src/tools/logger.ts","../src/tracker/storage.ts","../src/tracker/selector.ts","../src/tracker/models.ts","../src/tools/files.ts","../src/tools/json.ts","../src/config/builders.ts","../src/config/core.ts"],"sourcesContent":["export enum ActionType {\n    // input\n    Fill = 'FILL',\n    Type = 'TYPE',\n    Select = 'SELECT',\n\n    // action\n    Click = 'CLICK',\n    Hover = 'HOVER',\n\n    // assert\n    Text = 'TEXT',\n    Value = 'VALUE',\n    Hidden = 'HIDDEN',\n    Visible = 'VISIBLE',\n    Checked = 'CHECKED',\n    Enabled = 'ENABLED',\n    Disabled = 'DISABLED',\n    Unchecked = 'UNCHECKED'\n}\n\n\n","export const getLogger = (name: string) => ({\n  info: (msg: string) => console.info(`[${name}] ${msg}`),\n  debug: (msg: string) => console.debug(`[${name}] ${msg}`),\n  error: (msg: string) => console.error(`[${name}] ${msg}`),\n  warning: (msg: string) => console.warn(`[${name}] ${msg}`)\n});","import fs from 'fs/promises';\nimport path from 'path';\nimport { v4 as uuidv4 } from 'uuid';\nimport { getLogger } from '../tools/logger';\nimport { CoverageResult, CoverageResultList } from './models';\nimport { Settings } from '../config/models';\nimport { isPathExists } from '../tools/files';\n\nconst logger = getLogger('UI_COVERAGE_TRACKER_STORAGE');\n\nexport class UICoverageTrackerStorage {\n  private settings: Settings;\n\n  constructor({ settings }: { settings: Settings }) {\n    this.settings = settings;\n  }\n\n  async load(): Promise<CoverageResultList> {\n    const resultsDir = this.settings.resultsDir;\n\n    logger.info(`Loading coverage results from directory: ${resultsDir}`);\n\n    if (!(await isPathExists(resultsDir))) {\n      logger.warning(`Results directory does not exist: ${resultsDir}`);\n      return new CoverageResultList({ results: [] });\n    }\n\n    const results: CoverageResult[] = [];\n    for (const fileName of await fs.readdir(resultsDir)) {\n      const file = path.join(resultsDir, fileName);\n      const fileStats = await fs.stat(file);\n\n      if (fileStats.isFile() && fileName.endsWith('.json')) {\n        try {\n          const json = await fs.readFile(file, 'utf-8');\n          results.push(JSON.parse(json));\n        } catch (error) {\n          logger.warning(`Failed to parse file ${fileName}: ${error}`);\n        }\n      }\n    }\n\n    logger.info(`Loaded ${results.length} coverage files from directory: ${resultsDir}`);\n    return new CoverageResultList({ results });\n  }\n\n  async save(coverage: CoverageResult) {\n    const resultsDir = this.settings.resultsDir;\n\n    if (!(await isPathExists(resultsDir))) {\n      logger.info(`Results directory does not exist, creating: ${resultsDir}`);\n      await fs.mkdir(resultsDir, { recursive: true });\n    }\n\n    const file = path.join(resultsDir, `${uuidv4()}.json`);\n\n    try {\n      await fs.writeFile(file, JSON.stringify(coverage), 'utf-8');\n    } catch (error) {\n      logger.error(`Error saving coverage data to file ${file}: ${error}`);\n    }\n  }\n}\n","import { Selector } from '../tools/types';\nimport { SelectorType } from '../tools/selector';\n\nexport type SelectorGroupKey = string\n\ntype BuildSelectorGroupKeyProps = {\n  selector: Selector;\n  selectorType: SelectorType;\n}\n\nexport const buildSelectorGroupKey = ({ selector, selectorType }: BuildSelectorGroupKeyProps): SelectorGroupKey => {\n  return `${encodeURIComponent(selector)}|${selectorType}`;\n};\n\nexport const unpackSelectorGroupKey = (key: SelectorGroupKey): [Selector, SelectorType] => {\n  const [selector, selectorType] = key.split('|');\n  return [decodeURIComponent(selector) as Selector, selectorType as SelectorType];\n};","import { ActionType } from '../tools/actions';\nimport { SelectorType } from '../tools/selector';\nimport { AppKey, Selector } from '../tools/types';\nimport { buildSelectorGroupKey, SelectorGroupKey } from './selector';\n\nexport interface CoverageResult {\n  app: AppKey;\n  selector: Selector;\n  actionType: ActionType;\n  selectorType: SelectorType;\n}\n\nexport class CoverageResultList {\n  private readonly results: CoverageResult[];\n\n  constructor({ results }: { results: CoverageResult[] }) {\n    this.results = results;\n  }\n\n  filter({ app }: { app?: AppKey }): CoverageResultList {\n    const filtered = this.results.filter(r => !app || r.app.toLowerCase() === app.toLowerCase());\n    return new CoverageResultList({ results: filtered });\n  }\n\n  get groupedByAction(): Map<ActionType, CoverageResultList> {\n    return this.groupBy(r => r.actionType);\n  }\n\n  get groupedBySelector(): Map<SelectorGroupKey, CoverageResultList> {\n    return this.groupBy(r => buildSelectorGroupKey(r));\n  }\n\n  get totalActions(): number {\n    return this.results.length;\n  }\n\n  get totalSelectors(): number {\n    return this.groupedBySelector.size;\n  }\n\n  countAction(actionType: ActionType): number {\n    return this.results.filter(r => r.actionType === actionType).length;\n  }\n\n  private groupBy<K>(keyGetter: (r: CoverageResult) => K): Map<K, CoverageResultList> {\n    const map = new Map<K, CoverageResult[]>();\n    for (const result of this.results) {\n      const key = keyGetter(result);\n      const results = map.get(key) || [];\n      results.push(result);\n      map.set(key, results);\n    }\n\n    const resultMap = new Map<K, CoverageResultList>();\n    for (const [key, group] of map.entries()) {\n      resultMap.set(key, new CoverageResultList({ results: group }));\n    }\n\n    return resultMap;\n  }\n}\n","import fs from 'fs';\nimport yaml from 'js-yaml';\nimport fsAsync from 'fs/promises';\nimport { getLogger } from './logger';\n\nconst logger = getLogger('FILES');\n\nexport const isPathExists = async (path: string): Promise<boolean> => {\n  try {\n    await fsAsync.access(path);\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\nexport const loadFromJson = <T>(file: string): Partial<T> => {\n  try {\n    if (!fs.existsSync(file)) return {};\n    const raw = fs.readFileSync(file, 'utf-8');\n    return JSON.parse(raw);\n  } catch (error) {\n    logger.warning(`Failed to load JSON config ${file}: ${error}`);\n    return {};\n  }\n};\n\nexport const loadFromYaml = <T>(file: string): Partial<T> => {\n  try {\n    if (!fs.existsSync(file)) return {};\n    const raw = fs.readFileSync(file, 'utf-8');\n    return yaml.load(raw) as Partial<T>;\n  } catch (error) {\n    logger.warning(`Failed to load YAML config ${file}: ${error}`);\n    return {};\n  }\n};\n\n","import { getLogger } from './logger';\n\nconst logger = getLogger('JSON');\n\ntype LoadJsonProps<T> = {\n  content: string\n  fallback: T\n}\n\nexport const loadJson = <T>({ content, fallback }: LoadJsonProps<T>): T => {\n  try {\n    return JSON.parse(content, (key, value) => {\n      switch (key) {\n        case 'createdAt':\n          return new Date(value);\n        default:\n          return value;\n      }\n    });\n  } catch (error) {\n    logger.warning(`Failed to parse JSON: ${error}`);\n    return fallback;\n  }\n};","import { AppConfig, Settings } from './models';\nimport { loadJson } from '../tools/json';\nimport { loadFromJson, loadFromYaml } from '../tools/files';\nimport path from 'path';\nimport url from 'url';\nimport dotenv from 'dotenv';\n\ndotenv.config();\n\nconst cwd = process.cwd();\n\nconst cleanUndefined = <T>(input: Partial<T>): Partial<T> => {\n  return Object.fromEntries(Object.entries(input).filter(([_, v]) => v !== undefined)) as Partial<T>;\n};\n\nexport const buildEnvSettings = (): Partial<Settings> => cleanUndefined({\n  apps: loadJson<AppConfig[]>({ content: process.env.UI_COVERAGE_APPS || '', fallback: [] }),\n  resultsDir: process.env.UI_COVERAGE_RESULTS_DIR || undefined,\n  historyFile: process.env.UI_COVERAGE_HISTORY_FILE || undefined,\n  historyRetentionLimit: parseInt(process.env.UI_COVERAGE_HISTORY_RETENTION_LIMIT || '', 10) || undefined,\n  htmlReportFile: process.env.UI_COVERAGE_HTML_REPORT_FILE || undefined,\n  jsonReportFile: process.env.UI_COVERAGE_JSON_REPORT_FILE || undefined\n});\n\nexport const buildJsonSettings = () => {\n  return cleanUndefined(\n    loadFromJson<Settings>(path.join(cwd, 'ui-coverage.config.json'))\n  );\n};\n\nexport const buildYamlSettings = () => {\n  return cleanUndefined(\n    loadFromYaml<Partial<Settings>>(path.join(cwd, 'ui-coverage.config.yaml'))\n  );\n};\n\nexport const buildDefaultSettings = (): Settings => {\n  const cwd = process.cwd();\n\n  let htmlReportTemplateFile: string;\n  try {\n    htmlReportTemplateFile = path.join(path.dirname(url.fileURLToPath(import.meta.url)), 'reports/templates/index.html');\n  } catch (err) {\n    htmlReportTemplateFile = path.join(cwd, 'src/reports/templates/index.html');\n  }\n\n  return {\n    apps: [],\n    resultsDir: path.join(cwd, 'coverage-results'),\n    historyFile: path.join(cwd, 'coverage-history.json'),\n    historyRetentionLimit: 30,\n    htmlReportFile: path.join(cwd, 'index.html'),\n    jsonReportFile: path.join(cwd, 'coverage-report.json'),\n    htmlReportTemplateFile\n  };\n};","import { Settings } from './models';\nimport { buildDefaultSettings, buildEnvSettings, buildJsonSettings, buildYamlSettings } from './builders';\n\nexport const getSettings = (): Settings => {\n  const defaultSettings = buildDefaultSettings();\n\n  return {\n    ...defaultSettings,\n    ...buildYamlSettings(),\n    ...buildJsonSettings(),\n    ...buildEnvSettings(),\n    htmlReportTemplateFile: defaultSettings.htmlReportTemplateFile\n  };\n};\n"],"mappings":"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","names":["ActionType","fs","path","logger","fs","logger","path","cwd"]}