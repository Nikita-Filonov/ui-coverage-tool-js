{"version":3,"sources":["../src/cli.ts","../src/history/storage.ts","../src/history/selector.ts","../src/coverage/builder.ts","../src/history/builder.ts","../src/reports/storage.ts","../src/history/default.ts","../src/commands/save-report.ts","../src/commands/print-config.ts"],"sourcesContent":["import { Command } from 'commander';\nimport { saveReport } from './commands/save-report';\nimport { printConfig } from './commands/print-config';\n\nconst program = new Command();\n\nprogram\n  .name('ui-coverage-tool')\n  .description('UI Coverage CLI Tool')\n  .version('0.19.0');\n\nprogram\n  .command('save-report')\n  .description('Generate a coverage report based on collected result files.')\n  .action(saveReport);\n\nprogram\n  .command('print-config')\n  .description('Print the resolved configuration to the console.')\n  .action(printConfig);\n\nprogram.parse(process.argv);","import fs from 'fs/promises';\nimport path from 'path';\nimport { AppHistoryState, CoverageHistoryState } from './models';\nimport { getLogger } from '../tools/logger';\nimport { loadJson } from '../tools/json';\nimport { CoverageReportState } from '../reports/models';\nimport { buildSelectorKey } from './selector';\nimport { Settings } from '../config/models';\nimport { isPathExists } from '../tools/files';\n\nconst logger = getLogger('UI_COVERAGE_HISTORY_STORAGE');\n\nexport class UICoverageHistoryStorage {\n  private settings: Settings;\n\n  constructor({ settings }: { settings: Settings }) {\n    this.settings = settings;\n  }\n\n  async load(): Promise<CoverageHistoryState> {\n    const historyFile = this.settings.historyFile;\n\n    if (!historyFile) {\n      logger.debug('No history file path provided, returning empty history state');\n      return { apps: {} };\n    }\n\n    if (!(await isPathExists(historyFile))) {\n      logger.error(`History file not found: ${historyFile}, returning empty history state`);\n      return { apps: {} };\n    }\n\n    try {\n      logger.info(`Loading history from file: ${historyFile}`);\n      const content = await fs.readFile(historyFile, 'utf-8');\n      return loadJson<CoverageHistoryState>({ content, fallback: { apps: {} } });\n    } catch (error) {\n      logger.error(`Error loading history from file ${historyFile}: ${error}`);\n      return { apps: {} };\n    }\n  }\n\n  async save(state: CoverageHistoryState): Promise<void> {\n    const historyFile = this.settings.historyFile;\n\n    if (!historyFile) {\n      logger.debug('History file path is not defined, skipping history save');\n      return;\n    }\n\n    try {\n      await fs.mkdir(path.dirname(historyFile), { recursive: true });\n      await fs.writeFile(historyFile, JSON.stringify(state), 'utf-8');\n      logger.info(`History state saved to file: ${historyFile}`);\n    } catch (error) {\n      logger.error(`Error saving history to file ${historyFile}: ${error}`);\n    }\n  }\n\n  async saveFromReport(report: CoverageReportState): Promise<void> {\n    const state: CoverageHistoryState = { apps: {} };\n\n    for (const app of this.settings.apps) {\n      const coverage = report.appsCoverage[app.key];\n      if (!coverage) continue;\n\n      const appState: AppHistoryState = { total: coverage.history, elements: {} };\n\n      for (const element of coverage.elements) {\n        const key = buildSelectorKey(element);\n        appState.elements[key] = element.history;\n      }\n\n      state.apps[app.key] = appState;\n    }\n\n    await this.save(state);\n  }\n}\n","import { Selector, SelectorKey } from '../tools/types';\nimport { SelectorType } from '../tools/selector';\n\ntype BuildSelectorKeyProps = {\n  selector: Selector\n  selectorType: SelectorType\n}\n\nexport const buildSelectorKey = ({ selector, selectorType }: BuildSelectorKeyProps): SelectorKey => {\n  return `${selectorType}_${selector}`;\n};\n\n","import { ActionType } from '../tools/actions';\nimport { SelectorType } from '../tools/selector';\nimport { Selector } from '../tools/types';\nimport { ActionCoverage, AppCoverage, ElementCoverage } from './models';\nimport { CoverageResultList } from '../tracker/models';\nimport { UICoverageHistoryBuilder } from '../history/builder';\nimport { ActionHistory } from '../history/models';\nimport { unpackSelectorGroupKey } from '../tracker/selector';\n\ntype UICoverageBuilderProps = {\n  resultsList: CoverageResultList\n  historyBuilder: UICoverageHistoryBuilder\n}\n\ntype BuildElementCoverageProps = {\n  results: CoverageResultList\n  selector: Selector\n  selectorType: SelectorType\n}\n\nexport class UICoverageBuilder {\n  private resultsList: CoverageResultList;\n  private historyBuilder: UICoverageHistoryBuilder;\n\n  constructor({ resultsList, historyBuilder }: UICoverageBuilderProps) {\n    this.resultsList = resultsList;\n    this.historyBuilder = historyBuilder;\n  }\n\n  private buildElementCoverage({ results, selector, selectorType }: BuildElementCoverageProps): ElementCoverage {\n    const actions: ActionCoverage[] = Object.values(ActionType)\n      .map((action) => ({ type: action, count: results.countAction(action) }))\n      .filter((action) => action.count > 0);\n    const history = this.historyBuilder.getElementHistory({ actions, selector, selectorType });\n\n    return { history, actions, selector, selectorType };\n  }\n\n  build(): AppCoverage {\n    const actions: ActionHistory[] = [];\n    for (const [action, results] of this.resultsList.groupedByAction.entries()) {\n      if (results.totalActions > 0) {\n        actions.push({ type: action, count: results.totalActions });\n      }\n    }\n\n    const elements: ElementCoverage[] = [];\n    for (const [selectorGroupKey, results] of this.resultsList.groupedBySelector.entries()) {\n      const [selector, selectorType] = unpackSelectorGroupKey(selectorGroupKey);\n      elements.push(this.buildElementCoverage({ results, selector, selectorType }));\n    }\n\n    const history = this.historyBuilder.getAppHistory({\n      actions,\n      totalActions: this.resultsList.totalActions,\n      totalElements: this.resultsList.totalSelectors\n    });\n\n    return { history, elements };\n  }\n}\n","import { ActionHistory, AppHistory, AppHistoryState, ElementHistory } from './models';\nimport { Selector } from '../tools/types';\nimport { buildSelectorKey } from './selector';\nimport { SelectorType } from '../tools/selector';\nimport { Settings } from '../config/models';\n\ntype UICoverageHistoryBuilderProps = {\n  history: AppHistoryState\n  settings: Settings\n}\n\ntype GetElementHistoryProps = {\n  actions: ActionHistory[],\n  selector: Selector,\n  selectorType: SelectorType\n}\n\ntype BuildAppHistoryProps = {\n  actions: ActionHistory[],\n  totalActions: number,\n  totalElements: number\n}\n\ntype BuildElementHistoryProps = {\n  actions: ActionHistory[]\n}\n\ntype BaseHistory = { actions: ActionHistory[]; createdAt: Date }\n\ntype AppendHistoryProps<T extends BaseHistory> = {\n  history: T[],\n  buildFunc: () => T\n}\n\nexport class UICoverageHistoryBuilder {\n  private history: AppHistoryState;\n  private settings: Settings;\n  private createdAt: Date;\n\n  constructor({ history, settings }: UICoverageHistoryBuilderProps) {\n    this.history = history;\n    this.settings = settings;\n    this.createdAt = new Date();\n  }\n\n  buildAppHistory({ actions, totalActions, totalElements }: BuildAppHistoryProps): AppHistory {\n    return { actions, createdAt: this.createdAt, totalActions, totalElements };\n  }\n\n  buildElementHistory({ actions }: BuildElementHistoryProps): ElementHistory {\n    return { actions, createdAt: this.createdAt };\n  }\n\n  private appendHistory<T extends BaseHistory>({ history, buildFunc }: AppendHistoryProps<T>): T[] {\n    if (!this.settings.historyFile) {\n      return [];\n    }\n\n    const newItem = buildFunc();\n    if (!newItem.actions || newItem.actions.length === 0) {\n      return history;\n    }\n\n    const combined = [...history, newItem].sort(\n      (a, b) => a.createdAt.getTime() - b.createdAt.getTime()\n    );\n\n    return combined.slice(-this.settings.historyRetentionLimit);\n  }\n\n  getAppHistory(props: BuildAppHistoryProps): AppHistory[] {\n    return this.appendHistory({\n      history: this.history.total,\n      buildFunc: () => this.buildAppHistory(props)\n    });\n  }\n\n  getElementHistory({ actions, selector, selectorType }: GetElementHistoryProps): ElementHistory[] {\n    const key = buildSelectorKey({ selector, selectorType });\n    const history = this.history.elements[key] || [];\n    return this.appendHistory({\n      history,\n      buildFunc: () => this.buildElementHistory({ actions })\n    });\n  }\n}\n","import fs from 'fs/promises';\nimport path from 'path';\nimport { CoverageReportState } from './models';\nimport { getLogger } from '../tools/logger';\nimport { Settings } from '../config/models';\nimport { isPathExists } from '../tools/files';\n\nconst logger = getLogger('UI_REPORTS_STORAGE');\n\nexport class UIReportsStorage {\n  private settings: Settings;\n\n  constructor({ settings }: { settings: Settings }) {\n    this.settings = settings;\n  }\n\n  private async injectStateIntoHtml(state: CoverageReportState): Promise<string> {\n    const stateJson = JSON.stringify(state);\n    const templateFile = this.settings.htmlReportTemplateFile;\n    \n    if (!templateFile || !(await isPathExists(templateFile))) {\n      logger.error('Template HTML report file not found.');\n      return '';\n    }\n\n    const html = await fs.readFile(templateFile, 'utf-8');\n\n    const scriptRegex = /<script id=\"state\" type=\"application\\/json\">[\\s\\S]*?<\\/script>/gi;\n    const scriptTag = `<script id=\"state\" type=\"application/json\">${stateJson}</script>`;\n\n    return html.replace(scriptRegex, scriptTag);\n  }\n\n  async saveJsonReport(state: CoverageReportState): Promise<void> {\n    const file = this.settings.jsonReportFile;\n\n    if (!file) {\n      logger.info('JSON report file is not configured â€” skipping JSON report generation.');\n      return;\n    }\n\n    try {\n      await fs.mkdir(path.dirname(file), { recursive: true });\n      await fs.writeFile(file, JSON.stringify(state, null, 2));\n      logger.info(`JSON report saved to ${file}`);\n    } catch (error) {\n      logger.error(`Failed to write JSON report: ${error}`);\n    }\n  }\n\n  async saveHtmlReport(state: CoverageReportState): Promise<void> {\n    const file = this.settings.htmlReportFile;\n\n    if (!file) {\n      logger.info('HTML report file is not configured â€” skipping HTML report generation.');\n      return;\n    }\n\n    try {\n      const content = await this.injectStateIntoHtml(state);\n      await fs.mkdir(path.dirname(file), { recursive: true });\n      await fs.writeFile(file, content, 'utf-8');\n      logger.info(`HTML report saved to ${file}`);\n    } catch (error) {\n      logger.error(`Failed to write HTML report: ${error}`);\n    }\n  }\n}\n","import { AppHistoryState } from './models';\n\nexport const getDefaultAppHistoryState = (): AppHistoryState => ({\n  total: [],\n  elements: {}\n});","import { getLogger } from '../tools/logger';\nimport { UICoverageTrackerStorage } from '../tracker/storage';\nimport { UICoverageHistoryStorage } from '../history/storage';\nimport { CoverageReportState } from '../reports/models';\nimport { UICoverageBuilder } from '../coverage/builder';\nimport { UICoverageHistoryBuilder } from '../history/builder';\nimport { UIReportsStorage } from '../reports/storage';\nimport { getSettings } from '../config/core';\nimport { getDefaultAppHistoryState } from '../history/default';\n\nconst logger = getLogger('SAVE_REPORT');\n\nexport const saveReport = async () => {\n  logger.info('Starting to save the report');\n\n  const settings = getSettings();\n\n  const reportsStorage = new UIReportsStorage({ settings });\n  const trackerStorage = new UICoverageTrackerStorage({ settings });\n  const historyStorage = new UICoverageHistoryStorage({ settings });\n\n  const reportState: CoverageReportState = {\n    config: { apps: settings.apps },\n    createdAt: new Date(),\n    appsCoverage: {}\n  };\n  const historyState = await historyStorage.load();\n  const trackerState = await trackerStorage.load();\n  for (const app of settings.apps) {\n    const resultsList = trackerState.filter({ app: app.key });\n\n    const history = historyState.apps[app.key] || getDefaultAppHistoryState();\n    const historyBuilder = new UICoverageHistoryBuilder({ history, settings });\n    const coverageBuilder = new UICoverageBuilder({ resultsList, historyBuilder });\n    reportState.appsCoverage[app.key] = coverageBuilder.build();\n  }\n\n  await historyStorage.saveFromReport(reportState);\n  await reportsStorage.saveJsonReport(reportState);\n  await reportsStorage.saveHtmlReport(reportState);\n\n  logger.info('Report saving process completed');\n};","import { getLogger } from '../tools/logger';\nimport { getSettings } from '../config/core';\n\nconst logger = getLogger('PRINT_CONFIG');\n\nexport const printConfig = () => {\n  const settings = getSettings();\n  logger.info(JSON.stringify(settings, null, 2));\n};"],"mappings":"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","names":["fs","path","logger","fs","path","logger","logger"]}